// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // init parts
    ARegister(in=inA, load=loadA, out=outA);
    DRegister(in=AluOut, load=loadD, out=outD);
    // select A input
    Mux16(a=instruction, b=AluOut, sel=instruction[15], out=inA);

    //select ALU inputs
    Not(in=instruction[15], out=notLastInst);
    Not(in=instruction[12], out=chooseA);
    Or(a=notLastInst, b=chooseA, out=muxA);
    Mux16(a=inM, b=outA, sel=muxA, out=AluIn);
    ALU(x=outD, y=AluIn, 
    zx=instruction[11],
    nx=instruction[10],
    zy=instruction[9],
    ny=instruction[8],
    f=instruction[7],
    no=instruction[6],
    out=AluOut, zr=AluZr, ng=AluNg);
    
    // set load bits
    Or(a=notLastInst, b=instruction[5], out=loadA);
    And(a=instruction[15], b=instruction[4], out=loadD);
    And(a=instruction[15], b=instruction[3], out=writeM);

    // set M out and addr
    Or16(a=outA, b=outA, out[0..14]=addressM);
    Or16(a=AluOut, b=AluOut, out=outM);

    // check jump conditions
    Or(a=AluZr, b=AluNg, out=NotAluPs);
    Not(in=NotAluPs, out=AluPs);
    And(a=AluNg, b=instruction[2], out=jmp1);
    And(a=AluZr, b=instruction[1], out=jmp2);
    And(a=AluPs, b=instruction[0], out=jmp3);
    Or(a=jmp1, b=jmp2, out=jmp4);
    Or(a=jmp4, b=jmp3, out=jmp5);
    And(a=jmp5, b=instruction[15], out=jmpFinal);

    // jump, inc, or reset
    PC(in=outA, load=jmpFinal, inc=true, reset=reset, out[0..14]=pc);
}
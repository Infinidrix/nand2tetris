/** Implements the movement of both the 
    player's and the enemy ghosts' avatars
*/

class EnemyModel{
    field int hOffset; // the horizontal offset of the game
    field int x, y; // model's top left corner
    field int size; // the side length of model square
    field int step; // the length that the model can move in one turn 

    constructor EnemyModel new(int Ax, int Ay, int Asize, int Astep, int AhOffset){
        let hOffset = AhOffset;
        let x = Ax + hOffset;
        let y = Ay;
        let size = Asize;
        let step = Astep;
        do draw();
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** draws the model for the first time alone, next calls are to redraw */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawCircle(x + 4, y + 4, 4);
        return;
    }

    /** draws the new location of the model effiecently */ 
    method void redraw(int xDirection, int yDirection){
        var int newX, newY;
        do Screen.setColor(false);
        do Screen.drawCircle(x + 4, y + 4, 4);
        let x = x + (step * xDirection);
        let y = y + (step * yDirection);
        do Screen.setColor(true);
        do Screen.drawCircle(x + 4, y + 4, 4);
        return;
    }

    /** Moves the square up by 2 pixels. */
   method void moveUp() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, (y + size) - step + 1, x + size, y + size);
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y - step, x + size, y);
        let y = y - step;
      return;
   }

   /** Moves the square down by 2 pixels. */
   method void moveDown() {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + size, y + step - 1);
         do Screen.setColor(true);
         do Screen.drawRectangle(x, (y + size), x + size, y + size + step);
         let y = y + step;
      return;
   }

   /** Moves the square left by 2 pixels. */
   method void moveLeft() {
         do Screen.setColor(false);
         do Screen.drawRectangle((x + size) - step + 1, y, x + size, y + size);
         do Screen.setColor(true);
         do Screen.drawRectangle(x - step, y, x, y + size);
         let x = x - step;
      return;
   }

   /** Moves the square right by 2 pixels. */
   method void moveRight() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + step - 1, y + size);
        do Screen.setColor(true);
        do Screen.drawRectangle((x + size) - 1, y, x + size + step, y + size);
        let x = x + step;
      return;
   }

    /** checks if the next move is within bounds and valid 
        for now hardcodes the screensize*/
    method boolean withinBounds(int newX, int newY){
        if ((Math.min(newY, 0) = 0) & (Math.min(newX, hOffset) = hOffset) & 
        (Math.max(newY + size, 255) = 255) & (Math.max(newX + size, 511) = 511)){
            return true;
        }
        return false;
    }

    /** checks if we can move to the next block in the map */
    method boolean canMove(int xDir, int yDir, Map map){
        var int newX, newY;
        if (~(isMovable())){
            return true;
        }
        let newX = ((x - hOffset) / 8) + xDir;
        let newY = (y / 8) + yDir;
        return map.canMove(newX, newY);
    }

    /** moves the model in a specific direction */
    method int move(int xDir, int yDir, Map map){
        var Array result;
        var int returnValue;
        let returnValue = 0;
        if (isMovable()){
            let result = map.movePlayer((x - hOffset) / 8, y/8);
            if (~(result[0] = 0)){
                do Sys.wait(30);
                let returnValue = result[0];
                do Memory.deAlloc(result);
                return returnValue;
            }
            let x = (result[1] * 8) + hOffset;
            let y = result[2] * 8;
            do Memory.deAlloc(result);
        }
        if ((withinBounds(x + (xDir * step), y + (yDir * step))) &
            (canMove(xDir, yDir, map))){
            if (xDir = 1) { do moveRight(); }
            if (xDir = -1) { do moveLeft(); }
            if (yDir = 1) { do moveDown(); }
            if (yDir = -1) { do moveUp(); }
        }
        do Sys.wait(30);
        return returnValue;
    }

    method int getX(){
        return x;
    }

    method int getY(){
        return y;
    }

    method int getXRemainder(){
        return (x - hOffset) - (8 * ((x - hOffset) / 8));
    }

    method int getYRemainder(){
        return y - (8 * (y / 8));
    }
    method boolean isMovable(){
        return ((getXRemainder() = 0) &
                (getYRemainder() = 0));
    }
}
/** Implements the movement of both the 
    player's and the enemy ghosts' avatars
*/

class EnemyModel{
    field int hOffset; // the horizontal offset of the game
    field int x, y; // model's top left corner
    field int size; // the side length of model square
    field int step; // the length that the model can move in one turn
    field int xFacing, yFacing; // the direction that the model will continue moving if no command comes through 
    field Cell prevCell;


    constructor EnemyModel new(int Ax, int Ay, int Asize, int Astep, int AhOffset, Map map){
        let hOffset = AhOffset;
        let x = Ax + hOffset;
        let y = Ay;
        let size = Asize;
        let step = Astep;
        let prevCell = map.getCell(0, 0);
        do draw();
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** draws the model for the first time alone, next calls are to redraw */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawCircle(x + 4, y + 4, 4);
        return;
    }

    /** draws the new location of the model */ 
    method void redraw(int xDirection, int yDirection){
        do Screen.setColor(false);
        do Screen.drawCircle(x + 4, y + 4, 4);
        let x = x + (step * xDirection);
        let y = y + (step * yDirection);
        do Screen.setColor(true);
        do Screen.drawCircle(x + 4, y + 4, 4);
        return;
    }

    method void keepDrawing(){
        do Screen.drawCircle(x + 4, y + 4, 4);
        return;
    }

    /** checks if the next move is within bounds and valid 
        for now hardcodes the screensize*/
    method boolean withinBounds(int newX, int newY){
        if ((Math.min(newY, 0) = 0) & (Math.min(newX, hOffset) = hOffset) & 
        (Math.max(newY + size, 255) = 255) & (Math.max(newX + size, 511) = 511)){
            return true;
        }
        return false;
    }

    /** checks if we can move to the next block in the map */
    method boolean canMove(int xDir, int yDir, Map map){
        var int newX, newY;
        if (~(isMovable())){
            return true;
        }
        let newX = ((x - hOffset) / 8) + xDir;
        let newY = (y / 8) + yDir;
        return map.canMove(newX, newY);
    }

    /** moves the model in a specific direction */
    method void move(int xDir, int yDir, Map map){
        var int row, col;
        var Cell fromCell, toCell;
        if (isMovable()){
            let row = (x - hOffset) / 8;
            let col = (y / 8);
            do prevCell.setEmpty();
            if (prevCell.hasPellet()){
                do Screen.drawPixel(((prevCell.getRow()) * 8) + hOffset + 4, ((prevCell.getCol()) * 8) + 4);
            }
            let toCell = map.getCell(row, col);
            do toCell.setEnemy();
            let prevCell = toCell;
        }
        if ((withinBounds(x + (xDir * step), y + (yDir * step))) &
            (canMove(xDir, yDir, map))){
            let xFacing = xDir;
            let yFacing = yDir;
            do redraw(xDir, yDir);
        } else {
            do keepDrawing();
        }
        return;
    }

    method void keepState(Map map){
        do move(xFacing, yFacing, map);
        return;
    }

    method int getX(){
        return x;
    }

    method int getY(){
        return y;
    }

    method int getXRemainder(){
        return Utils.mod(x - hOffset, 8);
    }

    method int getYRemainder(){
        return Utils.mod(y, 8);
    }
    method boolean isMovable(){
        return ((getXRemainder() = 0) &
                (getYRemainder() = 0));
    }
}
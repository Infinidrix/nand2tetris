function EnemyModel.new 0
push constant 8
call Memory.alloc 1
pop pointer 0
push argument 4
pop this 0
push argument 0
push this 0
add
pop this 1
push argument 1
pop this 2
push argument 2
pop this 3
push argument 3
pop this 4
push argument 5
push constant 0
push constant 0
call Map.getCell 3
pop this 7
push pointer 0
call EnemyModel.draw 1
pop temp 0
push pointer 0
return
function EnemyModel.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function EnemyModel.draw 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 1
push constant 4
add
push this 2
push constant 4
add
push constant 4
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function EnemyModel.redraw 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 1
push constant 4
add
push this 2
push constant 4
add
push constant 4
call Screen.drawCircle 3
pop temp 0
push this 1
push this 4
push argument 1
call Math.multiply 2
add
pop this 1
push this 2
push this 4
push argument 2
call Math.multiply 2
add
pop this 2
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 1
push constant 4
add
push this 2
push constant 4
add
push constant 4
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function EnemyModel.keepDrawing 0
push argument 0
pop pointer 0
push this 1
push constant 4
add
push this 2
push constant 4
add
push constant 4
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function EnemyModel.withinBounds 0
push argument 0
pop pointer 0
push argument 2
push constant 0
call Math.min 2
push constant 0
eq
push argument 1
push this 0
call Math.min 2
push this 0
eq
and
push argument 2
push this 3
add
push constant 255
call Math.max 2
push constant 255
eq
and
push argument 1
push this 3
add
push constant 511
call Math.max 2
push constant 511
eq
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push constant 0
return
function EnemyModel.canMove 2
push argument 0
pop pointer 0
push pointer 0
call EnemyModel.isMovable 1
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push this 1
push this 0
sub
push constant 8
call Math.divide 2
push argument 1
add
pop local 0
push this 2
push constant 8
call Math.divide 2
push argument 2
add
pop local 1
push argument 3
push local 0
push local 1
call Map.canMove 3
return
function EnemyModel.move 4
push argument 0
pop pointer 0
push pointer 0
call EnemyModel.isMovable 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 1
push this 0
sub
push constant 8
call Math.divide 2
pop local 0
push this 2
push constant 8
call Math.divide 2
pop local 1
push this 7
call Cell.setEmpty 1
pop temp 0
push this 7
call Cell.hasPellet 1
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 7
call Cell.getRow 1
push constant 8
call Math.multiply 2
push this 0
add
push constant 4
add
push this 7
call Cell.getCol 1
push constant 8
call Math.multiply 2
push constant 4
add
call Screen.drawPixel 2
pop temp 0
label IF_FALSE1
push argument 3
push local 0
push local 1
call Map.getCell 3
pop local 3
push local 3
call Cell.setEnemy 1
pop temp 0
push local 3
pop this 7
label IF_FALSE0
push pointer 0
push this 1
push argument 1
push this 4
call Math.multiply 2
add
push this 2
push argument 2
push this 4
call Math.multiply 2
add
call EnemyModel.withinBounds 3
push pointer 0
push argument 1
push argument 2
push argument 3
call EnemyModel.canMove 4
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
pop this 5
push argument 2
pop this 6
push pointer 0
push argument 1
push argument 2
call EnemyModel.redraw 3
pop temp 0
goto IF_END2
label IF_FALSE2
push pointer 0
call EnemyModel.keepDrawing 1
pop temp 0
label IF_END2
push constant 0
return
function EnemyModel.keepState 0
push argument 0
pop pointer 0
push pointer 0
push this 5
push this 6
push argument 1
call EnemyModel.move 4
pop temp 0
push constant 0
return
function EnemyModel.getX 0
push argument 0
pop pointer 0
push this 1
return
function EnemyModel.getY 0
push argument 0
pop pointer 0
push this 2
return
function EnemyModel.getXRemainder 0
push argument 0
pop pointer 0
push this 1
push this 0
sub
push constant 8
call Utils.mod 2
return
function EnemyModel.getYRemainder 0
push argument 0
pop pointer 0
push this 2
push constant 8
call Utils.mod 2
return
function EnemyModel.isMovable 0
push argument 0
pop pointer 0
push pointer 0
call EnemyModel.getXRemainder 1
push constant 0
eq
push pointer 0
call EnemyModel.getYRemainder 1
push constant 0
eq
and
return

function EnemyModel.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push argument 4
pop this 0
push argument 0
push this 0
add
pop this 1
push argument 1
pop this 2
push argument 2
pop this 3
push argument 3
pop this 4
push pointer 0
call EnemyModel.draw 1
pop temp 0
push pointer 0
return
function EnemyModel.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function EnemyModel.draw 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 1
push constant 4
add
push this 2
push constant 4
add
push constant 4
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function EnemyModel.redraw 2
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 1
push constant 4
add
push this 2
push constant 4
add
push constant 4
call Screen.drawCircle 3
pop temp 0
push this 1
push this 4
push argument 1
call Math.multiply 2
add
pop this 1
push this 2
push this 4
push argument 2
call Math.multiply 2
add
pop this 2
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 1
push constant 4
add
push this 2
push constant 4
add
push constant 4
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function EnemyModel.moveUp 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 1
push this 2
push this 3
add
push this 4
sub
push constant 1
add
push this 1
push this 3
add
push this 2
push this 3
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 1
push this 2
push this 4
sub
push this 1
push this 3
add
push this 2
call Screen.drawRectangle 4
pop temp 0
push this 2
push this 4
sub
pop this 2
push constant 0
return
function EnemyModel.moveDown 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 1
push this 2
push this 1
push this 3
add
push this 2
push this 4
add
push constant 1
sub
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 1
push this 2
push this 3
add
push this 1
push this 3
add
push this 2
push this 3
add
push this 4
add
call Screen.drawRectangle 4
pop temp 0
push this 2
push this 4
add
pop this 2
push constant 0
return
function EnemyModel.moveLeft 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 1
push this 3
add
push this 4
sub
push constant 1
add
push this 2
push this 1
push this 3
add
push this 2
push this 3
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 1
push this 4
sub
push this 2
push this 1
push this 2
push this 3
add
call Screen.drawRectangle 4
pop temp 0
push this 1
push this 4
sub
pop this 1
push constant 0
return
function EnemyModel.moveRight 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 1
push this 2
push this 1
push this 4
add
push constant 1
sub
push this 2
push this 3
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 1
push this 3
add
push constant 1
sub
push this 2
push this 1
push this 3
add
push this 4
add
push this 2
push this 3
add
call Screen.drawRectangle 4
pop temp 0
push this 1
push this 4
add
pop this 1
push constant 0
return
function EnemyModel.withinBounds 0
push argument 0
pop pointer 0
push argument 2
push constant 0
call Math.min 2
push constant 0
eq
push argument 1
push this 0
call Math.min 2
push this 0
eq
and
push argument 2
push this 3
add
push constant 255
call Math.max 2
push constant 255
eq
and
push argument 1
push this 3
add
push constant 511
call Math.max 2
push constant 511
eq
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push constant 0
return
function EnemyModel.canMove 2
push argument 0
pop pointer 0
push pointer 0
call EnemyModel.isMovable 1
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push this 1
push this 0
sub
push constant 8
call Math.divide 2
push argument 1
add
pop local 0
push this 2
push constant 8
call Math.divide 2
push argument 2
add
pop local 1
push argument 3
push local 0
push local 1
call Map.canMove 3
return
function EnemyModel.move 2
push argument 0
pop pointer 0
push constant 0
pop local 1
push pointer 0
call EnemyModel.isMovable 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 3
push this 1
push this 0
sub
push constant 8
call Math.divide 2
push this 2
push constant 8
call Math.divide 2
call Map.movePlayer 3
pop local 0
push constant 0
push local 0
add
pop pointer 1
push that 0
push constant 0
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 30
call Sys.wait 1
pop temp 0
push constant 0
push local 0
add
pop pointer 1
push that 0
pop local 1
push local 0
call Memory.deAlloc 1
pop temp 0
push local 1
return
label IF_FALSE1
push constant 1
push local 0
add
pop pointer 1
push that 0
push constant 8
call Math.multiply 2
push this 0
add
pop this 1
push constant 2
push local 0
add
pop pointer 1
push that 0
push constant 8
call Math.multiply 2
pop this 2
push local 0
call Memory.deAlloc 1
pop temp 0
label IF_FALSE0
push pointer 0
push this 1
push argument 1
push this 4
call Math.multiply 2
add
push this 2
push argument 2
push this 4
call Math.multiply 2
add
call EnemyModel.withinBounds 3
push pointer 0
push argument 1
push argument 2
push argument 3
call EnemyModel.canMove 4
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
push constant 1
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push pointer 0
call EnemyModel.moveRight 1
pop temp 0
label IF_FALSE3
push argument 1
push constant 1
neg
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push pointer 0
call EnemyModel.moveLeft 1
pop temp 0
label IF_FALSE4
push argument 2
push constant 1
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push pointer 0
call EnemyModel.moveDown 1
pop temp 0
label IF_FALSE5
push argument 2
push constant 1
neg
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push pointer 0
call EnemyModel.moveUp 1
pop temp 0
label IF_FALSE6
label IF_FALSE2
push constant 30
call Sys.wait 1
pop temp 0
push local 1
return
function EnemyModel.getX 0
push argument 0
pop pointer 0
push this 1
return
function EnemyModel.getY 0
push argument 0
pop pointer 0
push this 2
return
function EnemyModel.getXRemainder 0
push argument 0
pop pointer 0
push this 1
push this 0
sub
push constant 8
push this 1
push this 0
sub
push constant 8
call Math.divide 2
call Math.multiply 2
sub
return
function EnemyModel.getYRemainder 0
push argument 0
pop pointer 0
push this 2
push constant 8
push this 2
push constant 8
call Math.divide 2
call Math.multiply 2
sub
return
function EnemyModel.isMovable 0
push argument 0
pop pointer 0
push pointer 0
call EnemyModel.getXRemainder 1
push constant 0
eq
push pointer 0
call EnemyModel.getYRemainder 1
push constant 0
eq
and
return

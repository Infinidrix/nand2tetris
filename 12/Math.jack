// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bits;
    /** Initializes the library. */
    function void init() {
        let bits = Array.new(15);
        let bits[0] = 1; let bits[1] = 2; let bits[2] = 4;
        let bits[3] = 8; let bits[4] = 16; let bits[5] = 32;
        let bits[6] = 64; let bits[7] = 128; let bits[8] = 256;
        let bits[9] = 512; let bits[10] = 1024; let bits[11] = 2048;
        let bits[12] = 4096; let bits[13] = 8192; let bits[14] = 16384;
        let bits[15] = -32767; let bits[15] = bits[15] - 1; // TODO: check that this works
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, prod;
        let i = 0;
        let prod = 0;
        while (i < 16){
            if (~((y & bits[i]) = 0)){
                let prod = prod + x;
            }
            let x = x + x;
            let i = i + 1;
        }
        return prod;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, temp, sign;
        
        let sign = 1;
        if (~(Math.abs(x) = x)){
            let x = Math.abs(x);
            let sign = -sign;
        }
        if (~(Math.abs(y) = y)){
            let y = Math.abs(y);
            let sign = -sign;
        }
        if (y > x) {return 0;}
        
        let q = Math.divide(x, y + y);
        let temp = q * y;
        if ((x - (temp + temp)) < y){
            let q = q + q;
        }else {
            let q = q + q + 1;
        }
        if (sign = -1){
            return -q;
        }
        return q;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y, temp;
        let j = 7;
        let y = 0;
        while (j > -1){
            let temp = (y + bits[j]);
            if (~(((temp * temp) > x) | (temp > 181))){
                let y = temp;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b){
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b){
            return a;
        }
        return b;
    }
}

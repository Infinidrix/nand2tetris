// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let ram[2049] = 16383;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int start, curr_size, next;
        let start = 2048;
        let curr_size = Memory.peek(start);
        let next = Memory.peek(start + 1);
        while (~((next - (start + curr_size)) > (size + 2))){
            let start = next;
            let curr_size = Memory.peek(start);
            let next = Memory.peek(start + 1);
        }
        do Memory.poke(start + 1, start + curr_size);
        do Memory.poke(start + curr_size, size + 2);
        do Memory.poke(start + curr_size + 1, next);
        return start + curr_size + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int prev;
        if (o = 2050){
            do Memory.poke(2048, 0);
            return;
        }
        let prev = 2048;
        while (~(Memory.peek(prev + 1) = (o - 2))){
            let prev = Memory.peek(prev + 1); 
        }
        do Memory.poke(prev + 1, Memory.peek(o - 1));
        return;
    }    
}

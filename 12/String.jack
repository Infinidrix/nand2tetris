// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array s;
    field int length, maxLen; 
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let s = Array.new(maxLength);
        let length = 0; let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do s.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let s[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, sign, temp, result;
        var Boolean foundChar;
        
        let foundChar = false;
        let result = 0; let i = 0; let sign = 1;
        if (s[0] = 45){
            let i = 1; let sign = -1; 
        }
        while (((i < length) & ~(foundChar))){
            let temp = s[i] - 48;
            if ((temp < 0) | (temp > 9)){
                let foundChar = true;
            } else{
                if (sign = -1){
                    let temp = -temp;
                }
                let result = (result * 10) + temp;
            }
            let i = i + 1;
        }
        return result;
    }

    method void intToString(int val, int lastInd){
        var int temp, index;
        if (val < 10){
            do appendChar(val + 48);
            return;
        }
        let temp = val / 10;
        do intToString(temp, lastInd + 1);
        do appendChar((val - (temp * 10)) + 48);
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        do s.dispose();
        let s = Array.new(6);
        let length = 0;
        if (val < 0){
            do appendChar(45);
            let val = Math.abs(val);
        }
        do intToString(val, length);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
